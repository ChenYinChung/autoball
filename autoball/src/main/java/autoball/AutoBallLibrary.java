package autoball;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.win32.StdCallLibrary;
import java.util.Arrays;
import java.util.List;
/**
 * JNA Wrapper for library <b>AutoBall</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AutoBallLibrary implements StdCallLibrary {
    public static final String JNA_LIBRARY_NAME = "AutoBallDll";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AutoBallLibrary.JNA_LIBRARY_NAME);
    static {
        Native.register(AutoBallLibrary.class, AutoBallLibrary.JNA_NATIVE_LIB);
    }
    public static final int _ANTENNACOUNT_ = (int)12;
    public static final int _NUMBEROFBALLCODE_ = (int)8;
    public static final int _NUMBEROFBARRELBALL_ = (int)32;
    public static final int _NUMBEROFCPITEMS_ = (int)40;

    public static class AntennaItem extends Structure {
        /** \u5929\u7dda\u865f */
        public int nAntennaID;
        /** \u6383\u63cf\u72c0\u614b\uff1a true \u6383\u63cf\u4e2d\uff0c false \u672a\u958b\u555f\u6383\u63cf */
        public byte bScanState;
        /** \u958b\u7403\u6b21\u6578 */
        public int nOpenTimes;
        /** \u958b\u7403\u7bc0\u9ede */
        public int nOpenBallNode;
        /** \u958b\u74031\u7bc0\u9ede */
        public int nOpenBallNode1;
        /** \u958b\u74032\u7bc0\u9ede */
        public int nOpenBallNode2;
        /** \u4e0a\u7403\u611f\u61c9\u7bc0\u9ede\uff08RD1000\u8f38\u5165\u7bc0\u9ede\uff09 */
        public int nInductionNode;
        /** \u9f13\u98a8\u6a5f\u7bc0\u9ede */
        public int nAirBlowerNode;
        /** \u5929\u7dda\u529f\u7387 \u53d6\u503c\u572813\u81f348\u4e4b\u9593 */
        public int nAntennaPower;
        public AntennaItem() {
            super();
        }
        protected List<? > getFieldOrder() {
            return Arrays.asList("nAntennaID", "bScanState", "nOpenTimes", "nOpenBallNode", "nOpenBallNode1", "nOpenBallNode2", "nInductionNode", "nAirBlowerNode", "nAntennaPower");
        }
        public AntennaItem(int nAntennaID, byte bScanState, int nOpenTimes, int nOpenBallNode, int nOpenBallNode1, int nOpenBallNode2, int nInductionNode, int nAirBlowerNode, int nAntennaPower) {
            super();
            this.nAntennaID = nAntennaID;
            this.bScanState = bScanState;
            this.nOpenTimes = nOpenTimes;
            this.nOpenBallNode = nOpenBallNode;
            this.nOpenBallNode1 = nOpenBallNode1;
            this.nOpenBallNode2 = nOpenBallNode2;
            this.nInductionNode = nInductionNode;
            this.nAirBlowerNode = nAirBlowerNode;
            this.nAntennaPower = nAntennaPower;
        }
        public AntennaItem(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends AntennaItem implements Structure.ByReference {

        };
        public static class ByValue extends AntennaItem implements Structure.ByValue {

        };
    };
    public static class AntennaSet extends Structure {
        /** \u3010\u843d\u7403/\u56de\u7403\u3011\u7bc0\u9ede */
        public int nFillBallNode;
        public AutoBallLibrary.AntennaItem[] aiAntennaItem = new AutoBallLibrary.AntennaItem[12];
        public AntennaSet() {
            super();
        }
        protected List<? > getFieldOrder() {
            return Arrays.asList("nFillBallNode", "aiAntennaItem");
        }
        public AntennaSet(int nFillBallNode, AutoBallLibrary.AntennaItem aiAntennaItem[]) {
            super();
            this.nFillBallNode = nFillBallNode;
            if ((aiAntennaItem.length != this.aiAntennaItem.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.aiAntennaItem = aiAntennaItem;
        }
        public AntennaSet(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends AntennaSet implements Structure.ByReference {

        };
        public static class ByValue extends AntennaSet implements Structure.ByValue {

        };
    };
    public static class ProcessFlowItem extends Structure {
        /** \u64cd\u4f5c */
        public int nOperation;
        /** \u689d\u4ef6 */
        public int nCondition;
        /** \u6301\u7e8c\u6642\u9593 \u55ae\u4f4d\u662f100ms */
        public int nTime;
        public ProcessFlowItem() {
            super();
        }
        protected List<? > getFieldOrder() {
            return Arrays.asList("nOperation", "nCondition", "nTime");
        }
        public ProcessFlowItem(int nOperation, int nCondition, int nTime) {
            super();
            this.nOperation = nOperation;
            this.nCondition = nCondition;
            this.nTime = nTime;
        }
        public ProcessFlowItem(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends ProcessFlowItem implements Structure.ByReference {

        };
        public static class ByValue extends ProcessFlowItem implements Structure.ByValue {

        };
    };
    public static class ProcessFlow extends Structure {
        /** \u6d41\u7a0b\u63a7\u5236\u985e\u578b \u4e09\u7a2e\uff1a 0 \u540c\u6642\u958b\uff0c	1 \u8f2a\u6d41\u958b\uff0c	2 \u958b\u5b8c\u4e00\u500b\u518d\u958b\u4e00\u500b */
        public int nControlStyle;
        /** \u6d41\u7a0b\u63a7\u5236\u9805 */
        public AutoBallLibrary.ProcessFlowItem[] pfItem = new AutoBallLibrary.ProcessFlowItem[_NUMBEROFCPITEMS_];
        public ProcessFlow() {
            super();
        }
        protected List<? > getFieldOrder() {
            return Arrays.asList("nControlStyle", "pfItem");
        }
        public ProcessFlow(int nControlStyle, AutoBallLibrary.ProcessFlowItem pfItem[]) {
            super();
            this.nControlStyle = nControlStyle;
            if ((pfItem.length != this.pfItem.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.pfItem = pfItem;
        }
        public ProcessFlow(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends ProcessFlow implements Structure.ByReference {

        };
        public static class ByValue extends ProcessFlow implements Structure.ByValue {

        };
    };
    public static class BallCode extends Structure {
        public byte[] bCodeByte = new byte[8];
        public BallCode() {
            super();
        }
        protected List<? > getFieldOrder() {
            return Arrays.asList("bCodeByte");
        }
        public BallCode(byte bCodeByte[]) {
            super();
            if ((bCodeByte.length != this.bCodeByte.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.bCodeByte = bCodeByte;
        }
        public BallCode(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends BallCode implements Structure.ByReference {

        };
        public static class ByValue extends BallCode implements Structure.ByValue {

        };
    };
    public static class BarrelStruct extends Structure {
        /** \u6b64\u5929\u7dda\u4e0a\u958b\u51fa\u7684\u7403\u7684\u500b\u6578 */
        public int nBallCount;
        /** \u6b64\u5929\u7dda\u4e0a\u958b\u51fa\u7684\u7403\u865f */
        public AutoBallLibrary.BallCode[] bcArray = new AutoBallLibrary.BallCode[32];
        public BarrelStruct() {
            super();
        }
        protected List<? > getFieldOrder() {
            return Arrays.asList("nBallCount", "bcArray");
        }
        public BarrelStruct(int nBallCount, AutoBallLibrary.BallCode bcArray[]) {
            super();
            this.nBallCount = nBallCount;
            if ((bcArray.length != this.bcArray.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.bcArray = bcArray;
        }
        public BarrelStruct(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends BarrelStruct implements Structure.ByReference {

        };
        public static class ByValue extends BarrelStruct implements Structure.ByValue {

        };
    };
    public static class GameInfoStruct extends Structure {
        /** \u5c40\u865f */
        public int nGameNum;
        /** \u958b\u7403\u6642\u9593 */
        public int dwGameTime;
        /** \u5404\u5929\u7dda\u4e0a\u958b\u51fa\u7684\u7403\u865f */
        public AutoBallLibrary.BarrelStruct[] bsArray = new AutoBallLibrary.BarrelStruct[12];
        public GameInfoStruct() {
            super();
        }
        protected List<? > getFieldOrder() {
            return Arrays.asList("nGameNum", "dwGameTime", "bsArray");
        }
        public GameInfoStruct(int nGameNum, int dwGameTime, AutoBallLibrary.BarrelStruct bsArray[]) {
            super();
            this.nGameNum = nGameNum;
            this.dwGameTime = dwGameTime;
            if ((bsArray.length != this.bsArray.length))
                throw new IllegalArgumentException("Wrong array size !");
            this.bsArray = bsArray;
        }
        public GameInfoStruct(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends GameInfoStruct implements Structure.ByReference {

        };
        public static class ByValue extends GameInfoStruct implements Structure.ByValue {

        };
    };
    public static native boolean aBDllInit();
    public static native boolean connectReader(int nCommNum, NativeLong lBaudrate);
    public static native boolean connectRD1(int nCommNum, NativeLong lBaudrate);
    public static native boolean connectRD2(int nCommNum, NativeLong lBaudrate);
    public static native boolean disconnectReader();
    public static native boolean disconnectRD1();
    public static native boolean disconnectRD2();
    public static native boolean startGame(int nGameCount, int nTimeSpan, int nCurGameNum);
    public static native boolean hasGamePlayed();
    public static native boolean getGameInfoStr(AutoBallLibrary.LPSTR pGameInfo);
    public static native boolean getGameInfo(AutoBallLibrary.GameInfoStruct pGameInfo);
    public static native int terminateGame();
    public static native int suspendGame();
    public static native int resumeGame();
    public static native int aBGetLastError(AutoBallLibrary.LPSTR strErrorMessage);
    public static native boolean getAntennaPara(AutoBallLibrary.AntennaSet strAntennaPara);
    public static native boolean setAntennaPara(AutoBallLibrary.AntennaSet strAntennaPara);
    public static native boolean getControlProcess(AutoBallLibrary.ProcessFlow strContorlProcess);
    public static native boolean setControlProcess(AutoBallLibrary.ProcessFlow strContorlProcess);
    public static native boolean setControlStyle(int nControlStyle);
    /** Pointer to unknown (opaque) type */
    public static class LPSTR extends PointerType {
        public LPSTR(Pointer address) {
            super(address);
        }
        public LPSTR() {
            super();
        }
    };
}
